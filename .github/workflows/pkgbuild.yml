name: PKGBUILD Updater

on:
    schedule:
        - cron: '0 2 * * *'
    workflow_dispatch:
    push:

jobs:
    pkgupdate:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up environment
              run: |
                sudo apt-get update
                sudo apt-get install -y curl jq
                if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                  echo "MANUALTRIG=true" >> $GITHUB_ENV
                else
                  echo "MANUALTRIG=false" >> $GITHUB_ENV
                fi

            - name: Check latest version
              id: checkver
              run: |
                LATEST_VERSION=$(curl -fsL https://downloads.ferronweb.org/latest.ferron)
                echo "Latest version: $LATEST_VERSION"
                if [[ "$LATEST_VERSION" == v* ]]; then
                    LATEST_VERSION_NUM=${LATEST_VERSION#v}
                else
                    LATEST_VERSION_NUM=$LATEST_VERSION
                fi
                echo "Latest version number: $LATEST_VERSION_NUM"
                CURRENT_VERSION=$(grep -oP 'pkgver=\K[^\s]+' PKGBUILD)
                echo "Current version: $CURRENT_VERSION"
                echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
                echo "LATEST_VERSION_NUM=$LATEST_VERSION_NUM" >> $GITHUB_ENV
                echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
                if [ "$LATEST_VERSION_NUM" != "$CURRENT_VERSION" ]; then
                    echo "UPDATENEEDED=true" >> $GITHUB_ENV
                else
                    echo "UPDATENEEDED=false" >> $GITHUB_ENV
                fi

            - name: Install makepkg
              if: env.UPDATENEEDED == 'true' || env.MANUALTRIG == 'true'
              run: |
                sudo apt-get -q -y install --no-install-recommends git pkg-config meson gcc libtool libgpgme-dev libarchive-dev ninja-build libcurl4-openssl-dev libssl-dev curl gettext python3 python3-setuptools dash gawk ca-certificates fakeroot fakechroot libarchive-tools
                sudo mkdir -p /usr/local/meson
                sudo git clone https://github.com/mesonbuild/meson.git /usr/local/meson
                [ -f /usr/bin/meson ] && {
                    mver=$(/usr/bin/meson --version)
                    sudo mv /usr/bin/meson /usr/bin/meson-${mver}
                }
                if [ -f /usr/local/meson/meson.py ]; then
                    sudo ln -s /usr/local/meson/meson.py /usr/bin/meson
                else
                    echo "ERROR: cannot locate /usr/local/meson/meson.py"
                    exit 1
                fi
                git clone https://gitlab.archlinux.org/pacman/pacman.git
                cd pacman
                meson setup -Ddoc=disabled build
                ninja -C build
                [ -d build ] || {
                    echo "Directory pacman/build does not exist. Exiting."
                    exit 1
                }
                cd build
                grep mirror scripts/libmakepkg/source/git.sh > /dev/null && {
                    cat scripts/libmakepkg/source/git.sh | sed -e "s/---mirror//" > /tmp/git$$
                    cp /tmp/git$$ scripts/libmakepkg/source/git.sh
                    rm -f /tmp/git$$
                }
                sudo meson install --no-rebuild --quiet
                cd ../..
                sudo rm -rf ./pacman

            - name: Update PKGBUILD for all architectures
              if: env.UPDATENEEDED == 'true' || env.MANUALTRIG == 'true'
              run: |
                echo "Updating PKGBUILD from version $CURRENT_VERSION to $LATEST_VERSION_NUM"
                sed -i "s/pkgver=.*$/pkgver=$LATEST_VERSION_NUM/g" PKGBUILD
                if [ "$UPDATENEEDED" == "true" ]; then
                    sed -i "s/pkgrel=.*$/pkgrel=1/g" PKGBUILD
                fi
                declare -A ARCH_MAPPINGS=(
                    ["x86_64"]="x86_64"
                    ["i686"]="i686"
                    ["armv7"]="armv7"
                    ["aarch64"]="aarch64" 
                    ["riscv64gc"]="riscv64"
                )
                for SRC_ARCH in "${!ARCH_MAPPINGS[@]}"; do
                    PKG_ARCH=${ARCH_MAPPINGS[$SRC_ARCH]}
                    echo "Processing architecture: $SRC_ARCH (package arch: $PKG_ARCH)"
                    if [ "$SRC_ARCH" == "armv7" ]; then
                      ABI="eabihf"
                    else
                      ABI=""
                    fi
                    FILE_NAME="ferron-$LATEST_VERSION_NUM-$SRC_ARCH-unknown-linux-gnu${ABI}.zip"
                    URL="https://downloads.ferronweb.org/$LATEST_VERSION/$FILE_NAME"
                    echo "Downloading: $URL"
                    curl -fsSL "$URL" -o "$FILE_NAME"
                    CHECKSUM=$(sha256sum "$FILE_NAME" | cut -d ' ' -f 1)
                    echo "Checksum for $PKG_ARCH: $CHECKSUM"
                    sed -i "s/_sha256sums_$PKG_ARCH=.*$/_sha256sums_$PKG_ARCH='$CHECKSUM'/g" PKGBUILD
                done
                cat PKGBUILD

            - name: Commit and push changes to GitHub
              if: env.UPDATENEEDED == 'true' || env.MANUALTRIG == 'true'
              run: |
                git config --global init.defaultBranch master
                git config --local user.email "action@github.com"
                git config --local user.name "GitHub Action"
                git add PKGBUILD
                git diff --cached --quiet || git commit -m "Update to version $LATEST_VERSION_NUM"
                git push -u origin master || echo "Nothing to push"

            - name: Publish to AUR
              if: env.UPDATENEEDED == 'true' || env.MANUALTRIG == 'true'
              env:
                AURSSHKEY: ${{ secrets.AURSSHKEY }}
                AURUSER: 'LunarN0v4'
              run: |
                git config --global init.defaultBranch master
                mkdir -p ~/.ssh
                echo "$AURSSHKEY" > ~/.ssh/aur_key
                chmod 600 ~/.ssh/aur_key
                cat > ~/.ssh/config << EOF
                Host aur.archlinux.org
                    IdentityFile ~/.ssh/aur_key
                    User $AURUSER
                EOF
                ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
                git clone ssh://aur@aur.archlinux.org/ferronweb.git aur-repo
                cd aur-repo
                cp ../PKGBUILD ../ferron.install ./
                makepkg --printsrcinfo > .SRCINFO
                git config --local user.email "action@github.com"
                git config --local user.name "GitHub Action"
                git add PKGBUILD ferron.install .SRCINFO
                git diff --cached --quiet || git commit -m "Update to version $LATEST_VERSION_NUM"
                git push -u origin master || echo "Nothing to push"