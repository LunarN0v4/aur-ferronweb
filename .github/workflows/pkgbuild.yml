name: PKGBUILD Updater

on:
    schedule:
        - cron: '0 2 * * *'
    workflow_dispatch:
    push:

jobs:
    pkgupdate:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up environment
              run: |
                sudo apt-get update
                sudo apt-get install -y curl jq

            - name: Check latest version
              id: checkver
              run: |
                LATEST_VERSION=$(curl -fsL https://downloads.ferronweb.org/latest.ferron)
                echo "Latest version: $LATEST_VERSION"
                if [[ "$LATEST_VERSION" == v* ]]; then
                    LATEST_VERSION_NUM=${LATEST_VERSION#v}
                else
                    LATEST_VERSION_NUM=$LATEST_VERSION
                fi
                echo "Latest version number: $LATEST_VERSION_NUM"
                CURRENT_VERSION=$(grep -oP 'pkgver=\K[^\s]+' PKGBUILD)
                echo "Current version: $CURRENT_VERSION"
                echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
                echo "LATEST_VERSION_NUM=$LATEST_VERSION_NUM" >> $GITHUB_ENV
                echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
                if [ "$LATEST_VERSION_NUM" != "$CURRENT_VERSION" ]; then
                    echo "UPDATENEEDED=true" >> $GITHUB_ENV
                else
                    echo "UPDATENEEDED=false" >> $GITHUB_ENV
                fi

            - name: Update PKGBUILD
              if: env.UPDATENEEDED == 'true'
              run: |
                echo "Updating PKGBUILD from version $CURRENT_VERSION to $LATEST_VERSION_NUM"
                declare -A ARCH_MAPPINGS
                ARCH_MAPPINGS=( ["x86_64"]="x86_64" ["i686"]="i686" ["armv7"]="armv7" ["aarch64"]="aarch64" ["riscv64gc"]="riscv64" )
                sed -i "s/pkgver=.*$/pkgver=$LATEST_VERSION_NUM/g" PKGBUILD
                sed -i "s/pkgrel=.*$/pkgrel=1/g" PKGBUILD
                for SRC_ARCH in "x86_64" "i686" "armv7" "aarch64" "riscv64gc"; do
                    PKG_ARCH=${ARCH_MAPPINGS[$SRC_ARCH]}
                    echo "Processing architecture: $SRC_ARCH (package arch: $PKG_ARCH)"
                    if [ "$SRC_ARCH" == "armv7" ]; then
                        ABI="eabihf"
                    else
                        ABI=""
                    fi
                    FILE_NAME="ferron-$LATEST_VERSION_NUM-$SRC_ARCH-unknown-linux-gnu${ABI}.zip"
                    URL="https://downloads.ferronweb.org/$LATEST_VERSION/$FILE_NAME"
                    echo "Downloading: $URL"
                    curl -fsSL "$URL" -o "$FILE_NAME"
                    CHECKSUM=$(sha256sum "$FILE_NAME" | cut -d ' ' -f 1)
                    echo "Checksum for $PKG_ARCH: $CHECKSUM"
                    sed -i "s/sha256sums_$PKG_ARCH=.*$/sha256sums_$PKG_ARCH=('$CHECKSUM')/g" PKGBUILD
                done
                cat PKGBUILD

            - name: Commit and push changes
              if: env.UPDATENEEDED == 'true'
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                git config --local user.email "action@github.com"
                git config --local user.name "GitHub Action"
                git add PKGBUILD
                git commit -m "Update to version $LATEST_VERSION_NUM"
                git push -u origin master

            - name: Publish to AUR
              if: env.UPDATENEEDED == 'true'
              env:
                AURSSHKEY: ${{ secrets.AURSSHKEY }}
                AURUSER: 'LunarN0v4'
              run: |
                mkdir -p ~/.ssh
                echo "$AURSSHKEY" > ~/.ssh/aur_key
                chmod 600 ~/.ssh/aur_key
                cat > ~/.ssh/config << EOF
                Host aur.archlinux.org
                    IdentityFile ~/.ssh/aur_key
                    User $AURUSER
                EOF
                ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
                git clone ssh://aur@aur.archlinux.org/ferronweb.git aur-repo
                cp PKGBUILD ferron.install aur-repo/
                cd aur-repo
                git config --local user.email "action@github.com"
                git config --local user.name "GitHub Action"
                git add PKGBUILD ferron.install
                git commit -m "Update to version $LATEST_VERSION_NUM"
                git push -u origin master